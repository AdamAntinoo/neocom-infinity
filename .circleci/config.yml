# - C I R C L E C I   C O N T I N U O U S   I N T E G R A T I O N
# Download, compile, test and deploy to the production server at Heroku.
# 
# Rules:
# 1. Try to keep the front end and the back end aligned. So event they seem to be two different applications I can reduce
#    exceptions if I drop both on staging even if there are no changes on one or both of the applications. The stage
#    branch that triggers Heroku installation id "test".
# 2. There is no possibility to run docker containers. So I have to create an special configuration to start in parallel
#    the ApiSimulator on the frontend and the application for acceptance on the backend. Get back the manual start and
#    stop for the ApiSimulator and include the code on the Heroku repository only.
# 3. Test deployment go to the **stage** instances. To deploy tests we should be sure that all test checks have been passed
#    or we can deploy changes that go to stage without passing unit testing or acceptance testing. So test should do all
#    previous stages until some sort of optimization is found.
# 4. Until script adjustment acceptance is optional to allow a commit to pass stage.
#
# BRANCHES:
# The lowest level branch is the 'experimental' at this level we only require the environment to load and the code to compile.
# The next level is 'development'
# The final level is 'test'. With this branch we should compile and do full tests to the code. If tests complete then
#   we deploy the code to the Heroku server for restart on the Stage servers.
#
version: 2.1
jobs:
  start-job:
    docker:
      - image: circleci/node:12.16.3-browsers
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout

  # - F R O N T E N D
  framework-frontend-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    environment:
      BIT_TOKEN: d47a8f17-636f-4bda-aad9-ac9fa27fe26d
    steps:
      - checkout
      - run:
          name: NEOCOM-FRONTEND - Configure BIT as a source for npm
          working_directory: NeoCom-Infinity-Frontend
          command: |
            node -v
            npm config set @bit:registry https://node.bitsrc.io
      - run:
          name: NEOCOM-FRONTEND - Install the framework
          working_directory: NeoCom-Infinity-Frontend
          command: |
            cp package.json package.json.checksum
            npm install
      - save_cache:
          paths:
            - ~/project/NeoCom-Infinity-Frontend/node_modules
          key: v1-node-dependencies-{{ checksum "~/project/NeoCom-Infinity-Frontend/package.json.checksum" }}
  compile-frontend-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    environment:
      BIT_TOKEN: d47a8f17-636f-4bda-aad9-ac9fa27fe26d
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-node-dependencies-{{ checksum "~/project/NeoCom-Infinity-Frontend/package.json" }}
          - v1-node-dependencies-
      - run:
          name: NEOCOM-FRONTEND - Configure BIT as a source for npm
          working_directory: NeoCom-Infinity-Frontend
          command: |
            node -v
            npm config set @bit:registry https://node.bitsrc.io
      - run:
          name: NEOCOM-FRONTEND - Install the framework
          working_directory: NeoCom-Infinity-Frontend
          command: |
            npm install
      - run:
          name: NEOCOM-FRONTEND - Compile Angular code
          working_directory: NeoCom-Infinity-Frontend
          command: |
            npm run build:prod
  unittest-frontend-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    environment:
      PORT: 5200
      CYPRESS_KEY: 9eebb605-a163-4da0-bb36-6af73faddf1b
      BIT_TOKEN: d47a8f17-636f-4bda-aad9-ac9fa27fe26d
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-node-dependencies-{{ checksum "~/project/NeoCom-Infinity-Frontend/package.json" }}
          - v1-node-dependencies-
      - run:
          name: NEOCOM-FRONTEND - Run unit tests and code coverage
          working_directory: NeoCom-Infinity-Frontend
          command: |
            npm run test:prod
      - store_test_results:
          path: ~/project/NeoCom-Infinity-Frontend/coverage
  acceptance-test-frontend-job:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: NEOCOM-FRONTEND - Validate the CI machine configuration
          working_directory: NeoCom-Infinity-Backend
          command: |
            node -v
            sudo snap install figlet
      - restore_cache:
          keys:
            - v1-node-dependencies-{{ checksum "~/project/NeoCom-Infinity-Frontend/package.json" }}
            - v1-node-dependencies-
      - run:
          name: NEOCOM-FRONTEND - Start frontend mock processes
          working_directory: NeoCom-Infinity-Frontend
          command: |
            npm run docker:start
      - run:
          name: NEOCOM-FRONTEND - Run the list of approved acceptance tests
          working_directory: NeoCom-Infinity-Frontend
          command: |
            npm run acceptance:cypress:NIF01

  # - B A C K E N D
  cache-dependencies-backend:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run: 
          name: NEOCOM-BACKEND - Get and cache the backend compilation dependencies
          working_directory: NeoCom-Infinity-Backend
          environment:
            PROFILE: "production"
          command: |
            ./gradlew dependencies
      - save_cache:
          paths:
            - ~/NeoCom-Infinity-Backend/.gradle
          key: v1-dependencies-{{ checksum "~/project/NeoCom-Infinity-Backend/dependencies.gradle" }}
  compile-backend-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "~/project/NeoCom-Infinity-Backend/dependencies.gradle" }}
          - v1-dependencies-
      - run:
          name: NEOCOM-BACKEND - Compile SpringBoot code
          working_directory: NeoCom-Infinity-Backend
          environment:
            PROFILE: "production"
          command: |
            ./gradlew clean dependencies bootJar
  unittest-backend-job:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          _JAVA_OPTIONS: "-Xmx3g"
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "~/project/NeoCom-Infinity-Backend/dependencies.gradle" }}
          - v1-dependencies-
      - run:
          name: NEOCOM-BACKEND - Unit Testing application
          working_directory: NeoCom-Infinity-Backend
          environment:
            PORT: 5240
            JDBC_DATABASE_URL: "jdbc:postgresql://0.0.0.0:5432/postgres"
            DB_USER: inno-user
            DB_PASSWORD: inno-password
            SPRING_PROFILES_ACTIVE: test
            PROFILE: "production"
          command: |
            ./gradlew test
      - store_test_results:
          path: ~/project/NeoCom-Infinity-Backend/build/test-results
      - store_artifacts:  
          path: ~/project/NeoCom-Infinity-Backend/build/libs
      - save_cache:
          paths:
            - ~/project/NeoCom-Infinity-Backend/.gradle
            - ~/project/NeoCom-Infinity-Backend/build
            - ~/project/NeoCom-Infinity-Backend/coverage
          key: v1-build-{{ checksum "~/project/NeoCom-Infinity-Backend/build.gradle" }}
  acceptance-test-backend-job:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: NEOCOM-BACKEND - Validate the CI machine configuration
          working_directory: NeoCom-Infinity-Backend
          command: |
            ./gradlew --version
            sudo snap install figlet
      - run:
          name: NEOCOM-BACKEND - Prepare the installation of the SDE database
          working_directory: NeoCom-Infinity-Backend/src/main/sh
          command: |
            ./update-sde.sh
            ./install-sde.sh
      - run:
          name: NEOCOM-BACKEND - Generate the docker file to be used for application acceptance tests
          working_directory: NeoCom-Infinity-Backend
          environment:
            PROFILE: "production"
          command: |
            ./docker-service.sh generate
      - run:
          name: NEOCOM-BACKEND - Start the mock services
          working_directory: NeoCom-Infinity-Backend
          command: |
            ./docker-service.sh start acceptance
      - run:
          name: NEOCOM-BACKEND - Run the list of approved acceptance tests
          working_directory: NeoCom-Infinity-Backend
          environment:
            PROFILE: "production"
            DEFAULT_BACKEND_SERVER: http://acceptance
            DEFAULT_BACKEND_PORT: 5241
          command: |
            ./gradlew acceptanceTest -Dcucumber.filter.tags="@NIB01.01 or @NIB01.05 or @NIB01.06 or @NIB01.07 or @NIB01.08" --info
  quality-sonarcloud-backend:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-build-{{ checksum "~/project/NeoCom-Infinity-Backend/build.gradle" }}
          - v1-build-
      - run:
          name: NEOCOM-BACKEND - Update SonarQube statistics
          working_directory: NeoCom-Infinity-Backend
          environment:
            PROFILE: "production"
          command: |
            ./gradlew test jacocoTestReport sonarqube

  integration-test-backend-job:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          _JAVA_OPTIONS: "-Xmx3g"
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    steps:
      - checkout

  stage-frontend-to-heroku:
    docker:
      - image: circleci/node:12.16.3-browsers
    steps:
      - checkout
      - run:
          name: FRONTEND - Generate deploy code for Development
          working_directory: NeoCom-Infinity-Frontend
          command: |
            node -v
            sed -i '/bahmutov.add/d' package.json
      - run:
          name: FRONTEND - Clone Heroku repository
          working_directory: NeoCom-Infinity-Frontend
          command: |
            git config --global user.email "adamantinoo.git@gmail.com"
            git config --global user.name "Adam antinoo"
            git init
            rm -rf .gitignore
            git add *.*
            git add config
            git add src
            git commit -m "-[HEROKU] Commiting code for deployment at development"
      - run:
          name: FRONTEND - Deploy Master to Heroku
          environment:
            HEROKU_FRONTEND_APP_NAME: neocom-frontend-dev
            HEROKU_FRONTEND_API_KEY: 95200331-6841-4afc-87c5-cae0a859d08f
          working_directory: NeoCom-Infinity-Frontend
          command: |
            git push https://heroku:$HEROKU_FRONTEND_API_KEY@git.heroku.com/$HEROKU_FRONTEND_APP_NAME.git master --force
                                                    
  stage-to-heroku:
    docker:
      - image: circleci/node:12.16.3-browsers
    steps:
      - checkout
      - run:
          name: FRONTEND - Generate deploy code for Stage
          working_directory: Printer3D-frontend
          command: |
            node -v
            sed -i '/bahmutov.add/d' package.json
            # npm install
      - run:
          name: FRONTEND - Clone Heroku repository
          working_directory: Printer3D-frontend
          command: |
            git config --global user.email "adamantinoo.git@gmail.com"
            git config --global user.name "Adam antinoo"
            git init
            rm -rf .gitignore
            git add *.*
            git add config
            git add src
            git commit -m "-[HEROKU] Commiting code for deployment"
      - run:
          name: FRONTEND - Deploy Master to Heroku
          environment:
            HEROKU_FRONTEND_APP_NAME: printer3d-frontend-stage
            HEROKU_FRONTEND_API_KEY: 95200331-6841-4afc-87c5-cae0a859d08f
          working_directory: Printer3D-frontend
          command: |
            git push https://heroku:$HEROKU_FRONTEND_API_KEY@git.heroku.com/$HEROKU_FRONTEND_APP_NAME.git master --force
 
workflows:
  version: 2
  neocom-infinity-stage:
    jobs:
      - start-job:
          filters:
            branches:
              only:
                - planetary
                - industry
                - experimental
                - development
                - test
                - hotfix
                - master
      # - FRONTEND
      - framework-frontend-job:
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - compile-frontend-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - unittest-frontend-job:
          requires:
            - start-job
            - compile-frontend-job
          filters:
            branches:
              only:
                - test
                - hotfix
      # - BACKEND
      - cache-dependencies-backend:
          filters:
            branches:
              only:
                - experimental
                - development
                - test
                - hotfix
                - master
      - compile-backend-job:
          requires:
            - start-job
            - cache-dependencies-backend
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - unittest-backend-job:
          requires:
            - start-job
            - compile-backend-job
          filters:
            branches:
              only:
                - test
                - hotfix
      - acceptance-test-backend-job:
          requires:
            - start-job
            - compile-backend-job
            - unittest-backend-job
          filters:
            branches:
              only:
                - test
                - hotfix
      - quality-sonarcloud-backend:
          requires:
            - unittest-backend-job
            - acceptance-test-backend-job
          filters:
            branches:
              only:
                - test

  neocom-infinity-deploy:
    jobs:
      - start-job:
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      # - FRONTEND
      - compile-frontend-job:
          filters:
            branches:
              only:
                - planetary
      - unittest-frontend-job:
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - stage-frontend-to-heroku:
          requires:
            - compile-frontend-job
          filters:
            branches:
              only:
                - planetary

      # - BACKEND
      - cache-dependencies-backend:
          requires:
            - start-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - quality-sonarcloud-backend:
          requires:
            - start-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - stage-to-heroku:
          requires:
            - unittest-frontend-job
            - quality-sonarcloud-backend
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
