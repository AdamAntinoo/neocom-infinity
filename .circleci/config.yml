# - C I R C L E C I   C O N T I N U O U S   I N T E G R A T I O N
# Download, compile, test and deploy to the production server at Heroku.
# 
# Rules:
# 1. Try to keep the front end and the back end aligned. So event they seem to be two different applications I can reduce
#    exceptions if I drop both on staging even if there are no changes on one or both of the applications. The stage
#    branch that triggers Heroku installation id "test".
# 2. There is no possibility to run docker containers. So I have to create an special configuration to start in parallel
#    the ApiSimulator on the frontend and the application for acceptance on the backend. Get back the manual start and
#    stop for the ApiSimulator and include the code on the Heroku repository only.
# 3. Test deployment go to the **stage** instances. To deploy tests we should be sure that all test checks have been passed
#    or we can deploy changes that go to stage without passing unit testing or acceptance testing. So test should do all
#    previous stages until some sort of optimization is found.
# 4. Until script adjustment acceptance is optional to allow a commit to pass stage.
#
# BRANCHES:
# The lowest level branch is the 'experimental' at this level we only require the environment to load and the code to compile.
# The next level is 'development'
# The final level is 'test'. With this branch we should compile and do full tests to the code. If tests complete then
#   we deploy the code to the Heroku server for restart on the Stage servers.
#
version: 2.1
jobs:
  start-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    steps:
      - checkout
      - run:
          name: CHECK - Install the framework
          command: |
            node -v

  compile-frontend-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    environment:
      BIT_TOKEN: d47a8f17-636f-4bda-aad9-ac9fa27fe26d
    steps:
      - checkout
      - run:
          name: FRONTEND - Configure BIT as a source for npm
          working_directory: NeoCom-Infinity-Frontend
          command: |
            node -v
            npm config set @bit:registry https://node.bitsrc.io
      - run:
          name: FRONTEND - Install the framework
          working_directory: NeoCom-Infinity-Frontend
          command: |
            npm install
      - run:
          name: FRONTEND - Compile Angular code
          working_directory: NeoCom-Infinity-Frontend
          command: |
            npm run build:prod
  build-frontend-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    environment:
      BIT_TOKEN: d47a8f17-636f-4bda-aad9-ac9fa27fe26d
    steps:
      - checkout
      - run:
          name: FRONTEND - Configure BIT as a source for npm
          working_directory: NeoCom-Infinity-Frontend
          command: |
            node -v
            npm config set @bit:registry https://node.bitsrc.io
      - run:
          name: FRONTEND - Install the framework
          working_directory: NeoCom-Infinity-Frontend
          command: |
            npm install
      - run:
          name: FRONTEND - Compile Angular application
          working_directory: NeoCom-Infinity-Frontend
          command: |
            npm run build:prod
  compile-backend-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          name: BACKEND - Compile SpringBoot code
          working_directory: NeoCom-Infinity-Backend
          command: |
            ./gradlew clean bootJar

  test-frontend-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    environment:
      PORT: 5100
      CYPRESS_KEY: 9eebb605-a163-4da0-bb36-6af73faddf1b
      BIT_TOKEN: d47a8f17-636f-4bda-aad9-ac9fa27fe26d
    steps:
      - checkout
      - run:
          name: FRONTEND - Install the framework
          command: |
            node -v
            npm install
      - run:
          name: FRONTEND - Build optimized Production dist
          command: |
            npm run build:dev
      - run:
          name: FRONTEND - Start backend simulator & Run acceptance D01 & D04
          command: |
            npm run acceptance:simulator
            npm run acceptance:ready
            npm run cypress:run
      - store_test_results:
          path: ~/project/Printer3D-frontend/cypress/cucumber-json
  quality-sonarcloud:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          name: BACKEND - Update SonarQube statistics
          environment:
            SONAR_TOKEN: 9dfe678ad49842371e44396a40c663586d497c31
          command: |
              sonar-scanner \
                -Dsonar.organization=evedimensinfin \
                -Dsonar.projectKey=evedimensinfin_neocom-infinity-frontend \
                -Dsonar.sources=. \
                -Dsonar.host.url=https://sonarcloud.io

  stage-frontend-to-heroku:
    docker:
      - image: circleci/node:12.16.3-browsers
    steps:
      - checkout
      - run:
          name: FRONTEND - Generate deploy code for Development
          working_directory: NeoCom-Infinity-Frontend
          command: |
            node -v
            sed -i '/bahmutov.add/d' package.json
      - run:
          name: FRONTEND - Clone Heroku repository
          working_directory: NeoCom-Infinity-Frontend
          command: |
            git config --global user.email "adamantinoo.git@gmail.com"
            git config --global user.name "Adam antinoo"
            git init
            rm -rf .gitignore
            git add *.*
            git add src
            git commit -m "-[HEROKU] Commiting code for deployment at development"
      - run:
          name: FRONTEND - Deploy Master to Heroku
          environment:
            HEROKU_FRONTEND_APP_NAME: neocom-frontend-dev
            HEROKU_FRONTEND_API_KEY: 95200331-6841-4afc-87c5-cae0a859d08f
          working_directory: NeoCom-Infinity-Frontend
          command: |
            git push https://heroku:$HEROKU_FRONTEND_API_KEY@git.heroku.com/$HEROKU_FRONTEND_APP_NAME.git master --force
  stage-to-heroku:
    docker:
      - image: circleci/node:12.16.3-browsers
    steps:
      - checkout
      - run:
          name: FRONTEND - Generate deploy code for Stage
          working_directory: Printer3D-frontend
          command: |
            node -v
            sed -i '/bahmutov.add/d' package.json
            # npm install
      - run:
          name: FRONTEND - Clone Heroku repository
          working_directory: Printer3D-frontend
          command: |
            git config --global user.email "adamantinoo.git@gmail.com"
            git config --global user.name "Adam antinoo"
            git init
            rm -rf .gitignore
            git add *.*
            git add config
            git add src
            git commit -m "-[HEROKU] Commiting code for deployment"
      - run:
          name: FRONTEND - Deploy Master to Heroku
          environment:
            HEROKU_FRONTEND_APP_NAME: printer3d-frontend-stage
            HEROKU_FRONTEND_API_KEY: 95200331-6841-4afc-87c5-cae0a859d08f
          working_directory: Printer3D-frontend
          command: |
            git push https://heroku:$HEROKU_FRONTEND_API_KEY@git.heroku.com/$HEROKU_FRONTEND_APP_NAME.git master --force
 
workflows:
  version: 2
  neocom-infinity-stage:
    jobs:
      - start-job:
          filters:
            branches:
              only:
                - experimental
                - development
                - test
                - planetary
                - hotfix
                - master

      - compile-backend-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - experimental
                - development
      - compile-frontend-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - experimental

  neocom-infinity-deploy:
    jobs:
      - compile-frontend-job:
          filters:
            branches:
              only:
                - planetary
      - test-frontend-job:
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - quality-sonarcloud:
          context: SonarCloud
          requires:
            - test-frontend-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - stage-frontend-to-heroku:
          requires:
            - compile-frontend-job
          filters:
            branches:
              only:
                - planetary
      - stage-to-heroku:
          requires:
            - test-frontend-job
            - quality-sonarcloud
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
