//--- S P R I N G B O O T   C O N F I G U R A T I O N
buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
        kotlin_version = '1.2.31'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

//--- P L U G I N S
plugins {
    id 'groovy'
    id 'java'
    id "io.ratpack.ratpack-groovy" version "1.5.4"
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'

//--- P R O J E C T   D E F I N I T I O N
group = 'Dimensinfin Industries'
version = '0.12.0'
archivesBaseName = 'NeoCom.MicroServices'
mainClassName = 'org.dimensinfin.eveonline.neocom.NeoComMicroServiceApplication'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    google()
    jcenter()
    maven { url 'https://jitpack.io' }
}

sourceSets {
//    main.java.srcDirs += 'src/main/java-datamngmt'
}

//--- S P R I N G B O O T
springBoot {
    buildInfo {
        properties {
            artifact = archivesBaseName
            version = version
            group = group
            name = archivesBaseName
        }
    }
}
bootJar {
    manifest {
        attributes 'Start-Class': mainClassName
    }
}

//--- T A S K S
// Gradlew start task to generate Heroku distribution
task stage {
    dependsOn installDist
}
jar {
    enabled = true
}
//task copyResources {
//    doLast {
//        copy {
//            from "${rootDir}/CitaMed.dashboard/dist/dashCitaMed"
//            into "${rootDir}/src/main/resources/static"
//        }
//    }
//}
//
//
//assemble.dependsOn(copyResources)
//jar.dependsOn(copyResources)
//processResources.dependsOn('CitaMed.dashboard:buildAngular')





// Clean up the resources received from other modules.
// Needs to be executed manually because it is dangerous to leave this decision to the build.
//task cleanUpResources(type: Delete) {
//    delete 'src/main/resources/sdecontents'
//    delete 'src/main/resources/yaml'
//}
// Copy configuration and property resources from other modules to the final 'resources' application folder.
task copyResources(type: Copy) {
    copy {
        // NeoCom.Model Properties
        println 'Copy :NeoCom.Model resources to :NeoCom:MicroServices'
        from project(':NeoCom.Model').file('src/main/resources')
        into file('src/main/resources')
    }
    copy {
        println 'Copy :NeoCom.DataManagement resources to :NeoCom:MicroServices'
        from project(':NeoCom.DataManagement').file('src/main/resources')
        into file('src/main/resources')
    }
}
// Collect output JARs from project modules to staging libs
//task copyStagingModel(dependsOn: ':NeoCom.Model:javadocJar') {
//    doLast {
//        copy {
//            // Modules JAR files
//            println 'Copying NeoCom.Model library'
//            from project(':NeoCom.Model').file('build/libs')
//            into file('libs')
//        }
//    }
//    dependsOn installDist
//}
//task copyStaging {
//    doLast {
//        copy {
//            // Modules JAR files
//            println 'Copying ESI.SwaggerApi library'
//            from project(':ESI.SwaggerApi').file('build/libs')
//            into file('libs')
//        }
//        copy {
//            // Modules JAR files
//            println 'Copying NeoCom.DataManagement library'
//            from project(':NeoCom.DataManagement').file('build/libs')
//            into file('libs')
//        }
//        println 'Moving final libraries to staging'
//        copy {
//            // Modules JAR files
//            println 'Copying NeoCom.Model library'
//            from file('libs')
//            into file('Z://NC/libs')
//        }
//    }
//    dependsOn copyStagingModel
//    dependsOn installDist
//}
//copyStaging.dependsOn installDist
//copyResources.dependsOn build
// Gradlew start task to generate Heroku distribution
//task stage(dependsOn: ':NeoCom.Model:javadocJar') {
////    println ':NeoCom.Microservices stage start'
////    dependsOn copyResources
////    dependsOn copyStaging
//    dependsOn copyStaging
//    doLast {
////        project(':NeoCom.Model').ta
//        copy {
//            println 'Copy :NeoCom.MicroServices production src to staging'
//            from file('src')
//            into file('Z://NC/src')
//        }
//        copy {
//            println 'Copy :NeoCom.MicroServices production libs to staging'
//            from file('libs')
//            into file('Z://NC/libs')
//        }
//    }
////    println ':NeoCom.Microservices stage end'
//}

//--- T A S K   C O O R D I N A T I O N
//copyStaging.mustRunAfter build
//installDist.mustRunAfter copyStaging
//stage.mustRunAfter installDist

//--- P R O D U C T   V E R S I O N S
ext {
    jacksonVersion = '2.8.6'
    ormliteVersion = '4.48'
}

//--- D E P E N D E N C I E S
dependencies {
    // M O D U L E    D E P E N D E N C I E S
    // C O R E   P L A T F O R M
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'joda-time:joda-time:2.3'

    // P R O J E C T    D E P E N D E N C I E S
    implementation project(path: ':NeoCom.Model')
    implementation project(path: ':NeoCom.DataManagement')

    // L O C A L   P U B L I S H E D   L I B R A R I E S
    implementation files ('libs/CoreBase.core-2.2.0.jar')
    implementation files ('libs/ESI.SwaggerApi-2.0.0.jar')

    // M O D U L E    D E P E N D E N C I E S
    // S P R I N G B O O T
    compile('org.springframework.boot:spring-boot-starter-web')
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // H E R O K U
    compile ratpack.dependency("hikari")
    compile "org.postgresql:postgresql:42.2.2"

    // N E O C O M . M O D E L
    implementation 'com.beimin:eveapi:6.0.6'
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-json-org:$jacksonVersion"
    implementation 'org.modelmapper:modelmapper:1.1.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.annimon:stream:1.1.9'

    // N E O C O M . D A T A M A N A G E M E N T
    implementation 'org.htmlparser:htmlparser:2.1'
    implementation 'com.github.scribejava:scribejava-core:5.4.0'
    implementation 'com.annimon:stream:1.1.9'
    implementation 'org.apache.commons:commons-lang3:3.7'

    // D A T A B A S E
    implementation "com.j256.ormlite:ormlite-jdbc:$ormliteVersion"
    implementation 'org.xerial:sqlite-jdbc:3.16.1'
    implementation 'mysql:mysql-connector-java:5.1.45'

    // N E O C O M . M I C R O S E R V I C E S
//    implementation 'org.dimensinfin:CoreBase.core:2.2.0'
//    implementation 'org.dimensinfin:ESI.SwaggerApi:2.0.0'

    // T E S T I N G   D E P E N D E N C I E S
    testImplementation 'junit:junit:4.12'
    testCompile('org.springframework.boot:spring-boot-starter-test')
//    testImplementation 'org.slf4j:slf4j-simple:1.7.25'
//    testImplementation 'joda-time:joda-time:2.3'
//    testImplementation 'com.j256.ormlite:ormlite-core:4.48'
//    testImplementation 'com.j256.ormlite:ormlite-jdbc:4.48'
//    testImplementation 'org.xerial:sqlite-jdbc:3.16.1'
//    testImplementation 'mysql:mysql-connector-java:5.1.45'
//    testImplementation 'com.fasterxml.jackson.core:jackson-annotations:2.8.6'
//    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.8.6'
//    testImplementation 'org.apache.commons:commons-lang3:3.7'
}
