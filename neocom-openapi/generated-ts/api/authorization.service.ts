/**
 * NeoCom Backend API
 * New NeoCom Infinity backend API. This is the complete API implementation for the backend services exposed, whatever the backend server that will provide the service. Initial implementations used the Java backend server and the ESI Public Data Services as a complementary source. New implementations have a dual backend service, part of it the original Java SpringBoot services and a new NestJS Typescript service that will implement new services and also hide the ESI Public sources into a HyperLink like DTO definitions. <br> Different api endpoints will be isolated with a version prefix so even they are all defined under the same path root the different version will be used by routers and proxies to fire the request to the correct backend implementation. 
 *
 * The version of the OpenAPI document: 0.27.0
 * Contact: adamantinoo.git@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { BackendErrorDto } from '../model/backendError';
import { RefreshTokenResponseDto } from '../model/refreshTokenResponse';
import { Configuration } from '../configuration';


@Injectable()
export class AuthorizationService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Get a new updated authorization token from Esi.
     * Get a new updated authorization token from Esi. Use the current Credential refresh token to access ESI and get a new valid and not expired authorization token.  Update the new token on the corresponding Credential and also update the NeoCom cookie on server response.  New token will last for another 15 minutes. 
     * @param nEOCOMTOKEN The access token to be used for authorization. This token will contain information to locate the credential to be used for data location.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public refreshAuthorizationToken(nEOCOMTOKEN: string, ): Observable<AxiosResponse<RefreshTokenResponseDto>>;
    public refreshAuthorizationToken(nEOCOMTOKEN: string, ): Observable<any> {

        if (nEOCOMTOKEN === null || nEOCOMTOKEN === undefined) {
            throw new Error('Required parameter nEOCOMTOKEN was null or undefined when calling refreshAuthorizationToken.');
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<RefreshTokenResponseDto>(`${this.basePath}/api/v1/neocom/refreshAuthorization`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
