/**
 * NeoCom Backend API
 * New NeoCom Infinity backend API. This is the complete API implementation for the backend services exposed, whatever the backend server that will provide the service. Initial implementations used the Java backend server and the ESI Public Data Services as a complementary source. New implementations have a dual backend service, part of it the original Java SpringBoot services and a new NestJS Typescript service that will implement new services and also hide the ESI Public sources into a HyperLink like DTO definitions. <br> Different api endpoints will be isolated with a version prefix so even they are all defined under the same path root the different version will be used by routers and proxies to fire the request to the correct backend implementation. 
 *
 * The version of the OpenAPI document: 0.27.0
 * Contact: adamantinoo.git@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable }                                        from 'rxjs';

import { AssetDto } from '../model/asset.dto';
import { BackendErrorDto } from '../model/backendError.dto';
import { V1MiningOperationDto } from '../model/v1MiningOperation.dto';


import { Configuration }                                     from '../configuration';


export interface CharacterServiceInterface {
    defaultHeaders: {};
    configuration: Configuration;

    /**
    * Get the complete list of assets for the selected character.
    * Gets the complete list of assets for a character. The list can be a quite long array of elements. For echa of them the process will convert the raw ESI data into a asset Stack that will point to a ESI Type element and a ESI Location. Asset Group and Category are lookked up and added to the Asset definition. 
    * @param nEOCOMTOKEN The access token to be used for authorization. This token will contain information to locate the credential to be used for data location.
    */
    getCharacterAssets(nEOCOMTOKEN: string, extraHttpRequestParams?: any): Observable<Array<AssetDto>>;

    /**
    * Get the minings operations for current target character.
    * Gets the list of Esi Mining Operations that are generated automatically during mining. The target to be used is the capsuleer identifier or corporation identifier that is found on the access token. &lt;br&gt; The list  of operations is transformed to a hyperlink suitable frontend interpretation and operation items are given a unique key for easy identification of changes. &lt;br&gt; There is no persistence for this kind of data. 
    * @param nEOCOMTOKEN The access token to be used for authorization. This token will contain information to locate the credential to be used for data location.
    */
    getMiningOperations(nEOCOMTOKEN: string, extraHttpRequestParams?: any): Observable<Array<V1MiningOperationDto>>;

}
