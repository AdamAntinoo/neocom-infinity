openapi: '3.0.3'
info:
  title: NeoCom Infinity Backend Public API
  version: 0.29.0
  description: >
    # Summary

    ### New and latest NeoCom Api definitions to be used on the reviewed implementations for the new backend services.

    This API defines all the client REST endpoints public and available to other systems. The API definition follows the OpenApi 3.0 specification
    and there are provisioning for automatic code generation for this API clients.

    This specification describes the implemented API for the backend on the application **NeoCom.Infinity**. The end points
    described are expected to be used from the **Angular Frontend** application. The ouputs are formatted as JSON results and will
    be consumed by json compliant applications or by clients that will transform them to Java instances. The recommended json deserializer is GSON.

    For java transformation the JSON code could be used to generate the transformation code at the next link. **http://www.jsonschema2pojo.org/**.

    # System Description

    The backend is a single standalone SpringBoot server but that publishes more than a single service. There are 3 main services at this version:

    * **neocom** - this is the authenticated set of endpoints that will collect and the data that can only be obtained when a Pilot is
    authenticated on the ESI services page. Some of the endpoints may also have a counterpart on the other services for public or data that can
    also be obtained with no authentication.
    * **public** - Endpoints that export some sets of data like Character or Market or any other section and that do no require authentication.
    * **universe** - Endpoints that reference universe or game data and not related to any of the previous or so generic and core that can be used
    from anywhere. There are endpoitns for locations, types and other game data structures.

    * **spacelocations** - This service will search for detailed data about a space location identifier and get the type, system, statios or
    structure and any other specific data that is related to the location. Wormholes are still unsupported as many of the out of common space
    coordinates.
    * **items** - This is the item database access service. It will add all sorts of market data to each of the available items.

    The exported data is being improved for HATEOAS support so now some of the endpoints will replace resolved esi data by an equivalent http link.
    This will help to reduce response times because there is no need to go to the ESI servers to get the data (this is specially severe when there
    are collections of data). The consumer application is really required that detailed data can follow the link to retrieve the additional
    information but this is done at the user selection pace and not preloading all possible data records.


    This is most effective on long lists like assets or fittings. Now instead of resolving each of the item accesses and also getting each item
    market information the response will just report a link. Following that link we get the item and from it we can get any market additional data
    is really required.

    New NeoCom Infinity backend API. This is the complete API implementation for the backend services exposed, whatever the backend server
    that will provide the service. Initial implementations used the Java backend server and the ESI Public Data Services as a complementary source.
    New implementations have a dual backend service, part of it the original Java SpringBoot services and a new NestJS Typescript service that will
    implement new services and also hide the ESI Public sources into a HyperLink like DTO definitions.
    <br>
    Different api endpoints will be isolated with a version prefix so even they are all defined under the same path root the different version will
    be used by routers and proxies to fire the request to the correct backend implementation.

    ## CHANGES:
    * [20201226] *Introduced the new Market Data endpoints both for authenticated and universal access.*
    * [20240609] *Introduced the new endpoint separation by backed server. There are the neonest and the neospring servers.*

    ## TODO:
    * [20201019] *Replace old api endpoints by the new HAL endpoints and also document the corrent exception responses.*
    * [20191025] *Complete the definition for the NeoComExceptionResponse once I have the correct serialization data.*

  contact:
    name: Adam Antinoo
    email: adamantinoo.git@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/license-2.0.html

externalDocs:
  description: How to use this module.
  url: ./README.md

tags:
  - name: Authorization
    description: NeoCom Authorization Endpoint set
  - name: Character
    description: NeoCom endpoints related to character data.
  - name: Industry
    description: NeoCom Industry endpoints. Covers Character and Corporation if available.
  - name: public
    description: >
      Public (P). Endpoints that export some sets of data like Character or Market or any other section and that do no require authentication.
  - name: universe
    description: >
      Universe (U). Endpoints that reference universe or game data and not related to any of the previous or so generic and core that can be used
      from anywhere. There are endpoints for locations, types and other game data structures. Any data that does not require authentication and
      that is publicly available.
paths:
  /api/v1/neocom/refreshAuthorization:
    get:
      tags:
        - Authorization
      summary: Get a new updated authorization token from Esi.
      description: |
        Get a new updated authorization token from Esi. Use the current Credential refresh token to access ESI and get a new valid and not expired
        authorization token.
        
        Update the new token on the corresponding Credential and also update the NeoCom cookie on server response.
        
        New token will last for another 15 minutes.
      operationId: refreshAuthorizationToken
      parameters:
        - name: NEOCOM-TOKEN
          in: cookie
          example: esjhkjegjhjgwehihiuwyer.jkhwrhgwbjhvwge
          description: The access token to be used for authorization. This token will contain information to locate the credential to be used for data location.
          required: true
          schema:
            type: string
            format: jwt
      responses:
        '200':
          description: Token refresh completed successfully. A new authorization token is available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Unauthorized. The current active access token is not present. The character identified thus cannot be accessed and the credential cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackendError'
        '403':
          description: Forbidden. The credential information is not valid to create a new access token and the authorization request is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackendError'
        '404':
          description: Not found. There is an access token and a credential identifier but that credential is no longer available at the repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackendError'
  /api/v3/neocom/character/assets:
    get:
      tags:
        - Character
      summary: Get the complete list of assets for the selected character.
      description: >
        Gets the complete list of assets for a character. The list can be a quite long array of elements. For echa of them the process will convert the raw ESI
        data into a asset Stack that will point to a ESI Type element and a ESI Location. Asset Group and Category are lookked up and added to the Asset definition.
      operationId: getCharacterAssets
      parameters:
        - name: NEOCOM_TOKEN
          in: cookie
          example: esjhkjegjhjgwehihiuwyer.jkhwrhgwbjhvwge
          description: The access token to be used for authorization. This token will contain information to locate the credential to be used for data location.
          required: true
          schema:
            type: string
            format: jwt
      responses:
        '200':
          description: List of assets obtained and processed successfully. The new list is returned to the client.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Asset'
        '401':
          description: Unauthorized. The current active access token is not present. The character identified thus cannot be accessed and the credential cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackendError'
        '403':
          description: Forbidden. The credential information is not valid to create a new access token and the authorization request is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackendError'
  /api/v3/neocom/character/blueprints/session/{sessionid}:
    get:
      deprecated: true
      tags:
        - Character
      summary: Get the list of blueprints for a character under a session to be able to cache the data.
      description: >
        Get the list of blueprints for a character.
        Add a session identifier that will differentiate requests from different characters and then be able to cache the results for each different requester.
        Session is an architecture element that has no application functionality but to identify elements to cache. Session is generated by the frontend on each new
        application initialization.
      operationId: getCharacterBlueprints
      parameters:
        - name: sessionid
          in: path
          description: The session identifier to be used to cache the blueprints.
          required: true
          schema:
            type: string
        - in: header
          name: NEOCOM-TOKEN
          schema:
            type: string
            format: jwt
          required: true
          example: esjhkjegjhjgwehihiuwyer.jkhwrhgwbjhvwge
          description: The access token to be used for authorization. This token will contain information to locate the credential to be used for data extraction.
      responses:
        200:
          description: List of blueprints obtained and processed successfully. The new list is returned to the client.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Blueprint'
        401:
          description: Unauthorized. The current active access token is not present. The character identified thus cannot be accessed and the credential cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackendError'
        403:
          description: Forbidden. The credential information is not valid to create a new access token and the authorization request is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackendError'
  /api/v3/neonest/character/miningoperations/session/{sessionid}:
    get:
      tags:
        - Industry
      summary: Get the minings operations for current target character.
      description: >
        Gets the list of Esi Mining Operations that are generated automatically during mining. The target to be used
        is the capsuleer identifier or corporation identifier that is found on the access token.
        <br>
        The list  of operations is transformed to a hyperlink suitable frontend interpretation and operation items
        are given a unique key for easy identification of changes.
        <br>
        There is no persistence for this kind of data.
      operationId: getMiningOperations4Pilot
      parameters:
        - name: sessionid
          in: path
          description: The session identifier to be used to cache the blueprints. This is an structural element not funational.
          required: true
          schema:
            type: string
            format: uuid
          example: 6ea711ee-5ecd-42e2-90be-eedacf2c43f7
        - name: X-NeoCom-Authorization
          in: header
          description: The access token to be used for authorization. This token will contain information to locate the credential to be used for data extraction.
          required: true
          schema:
            type: string
            format: jwt
          example: esjhkjegjhjgwehihiuwyer.jkhwrhgwbjhvwge
      responses:
        200:
          description: Success retrieving the list of Mining Operations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.MiningOperation'
        401:
          description: Unauthorized. The current active access token is not present. The character identified thus cannot be accessed and the credential cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackendError'
        403:
          description: Forbidden. The credential information is not valid to create a new access token and the authorization request is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackendError'
      security:
        - neocom_esi_auth: []

  # - N E O C O M   I N D U S T R Y
  /api/v3/neonest/industry/pilots/manufacture/blueprints/session/{sessionid}:
    get:
      tags:
        - Industry
      operationId: getProcessedBlueprints4Pilot
      summary: Gets the list of Extended Blueprints for the selected pilot including some standard cost calculations to get the blueprint comparison profit index.
      description: >
        **v1**
        Analyze the list of blueprints accessible to the selected pilot. Calculate the Bill Of Materials, the production cost and the current market
        cost. For variable scenarios use the pilot configuration properties to identify the preferred manufacture factory or the trading market hub.
        The endpoint is authenticated so validate the selected pilot identifier before going to fetch the data.
        <br>
        **v2**
        On this version we have removed data from the response. But Market Data is still used to calculate the manufacture and the bom costs to be
        compared and to obtain the comparison index. That index is the market sell profit against the manufacture cost. The value should be grater
        than one for profitable items. Market Data used for the initial blueprint calculation is taken from the main hub that corresponds to the region
        where the item is located (to be completed).
      parameters:
        - name: sessionid
          in: path
          description: The session identifier to be used to cache the blueprints. This is an structural element not funational.
          required: true
          schema:
            type: string
            format: uuid
          example: 6ea711ee-5ecd-42e2-90be-eedacf2c43f7
        - name: X-NeoCom-Authorization
          in: header
          description: The access token to be used for authorization. This token will contain information to locate the credential to be used for data extraction.
          required: true
          schema:
            type: string
            format: jwt
          example: esjhkjegjhjgwehihiuwyer.jkhwrhgwbjhvwge
      responses:
        200:
          description: >
            List of Extended Blueprints. A Extended Blueprint is a packed set of identical blueprints. Data is calculated using Region Hub market.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v2.ProcessedBlueprint'

components:
  schemas:
    RefreshTokenResponse:
      type: object
      properties:
        credential:
          $ref: '#/components/schemas/Credential'
    BackendError:
      type: object
      properties:
        errorCode:
          type: string
          example: ACCESS_TOKEN_NOT_PRESENT
          description: The string error code that identifies the exact error message variant.
        message:
          type: string
          example: 'Request with no access token present. Unable to retrieve credential.'
          description: The exception message reported by the backend.

    Credential:
      type: object
      properties:
        uniqueCredential:
          type: string
          format: uuid
          example: 73a4c25a-69e2-42e1-bc20-29f8fe607dfe
          description: The unique identifier for a credential entity instance.
        accountId:
          type: integer
          format: int32
          example: 9886754
          description: The Eve Online account number.
        accountName:
          type: string
          example: EveOnline-12-march-2024
          description: The Eve Online account name identifier. Each Eve Online account can contain up to 3 characters with a single account identification.
        corporationId:
          type: integer
          format: int32
          example: 4563422
          description: The unique identifier for the Corporation on the Eve Online set of data. Initial game corporations are also on this list along user created corporations.
        dataSource:
          type: string
          description: The Eve Online data source for the ESI requests. It can differentiate between Production (tranquility server) and development and testing (singularity).
          enum:
            - tranquility
            - singularity
        accessToken:
          type: string
          format: jwt
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          description: The ESI Data Source authorization token received when creating a token with a set of i for ona of the characters related to aEve Online account.
        tokenType:
          type: string
          deprecated: true
          description: The token type. There is only one type of token nowadays.
        scope:
          type: string
          example: publicData esi-calendar.respond_calendar_events.v1 esi-calendar.read_calendar_events.v1 esi-location.read_location.v1 esi-location.read_ship_type.v1 esi-mail.organize_mail.v1 esi-mail.read_mail.v1 esi-mail.send_mail.v1 esi-skills.read_skills.v1 esi-skills.read_skillqueue.v1 esi-wallet.read_character_wallet.v1 esi-wallet.read_corporation_wallet.v1 esi-search.search_structures.v1 esi-clones.read_clones.v1 esi-characters.read_contacts.v1 esi-universe.read_structures.v1 esi-bookmarks.read_character_bookmarks.v1 esi-killmails.read_killmails.v1 esi-corporations.read_corporation_membership.v1 esi-assets.read_assets.v1 esi-planets.manage_planets.v1 esi-fleets.read_fleet.v1 esi-fleets.write_fleet.v1 esi-ui.open_window.v1 esi-ui.write_waypoint.v1 esi-characters.write_contacts.v1 esi-fittings.read_fittings.v1 esi-fittings.write_fittings.v1 esi-markets.structure_markets.v1 esi-corporations.read_structures.v1 esi-characters.read_loyalty.v1 esi-characters.read_opportunities.v1 esi-characters.read_chat_channels.v1 esi-characters.read_medals.v1 esi-characters.read_standings.v1 esi-characters.read_agents_research.v1 esi-industry.read_character_jobs.v1 esi-markets.read_character_orders.v1 esi-characters.read_blueprints.v1 esi-characters.read_corporation_roles.v1 esi-location.read_online.v1 esi-contracts.read_character_contracts.v1 esi-clones.read_implants.v1 esi-characters.read_fatigue.v1 esi-killmails.read_corporation_killmails.v1 esi-corporations.track_members.v1 esi-wallet.read_corporation_wallets.v1 esi-characters.read_notifications.v1 esi-corporations.read_divisions.v1 esi-corporations.read_contacts.v1 esi-assets.read_corporation_assets.v1 esi-corporations.read_titles.v1 esi-corporations.read_blueprints.v1 esi-bookmarks.read_corporation_bookmarks.v1 esi-contracts.read_corporation_contracts.v1 esi-corporations.read_standings.v1 esi-corporations.read_starbases.v1 esi-industry.read_corporation_jobs.v1 esi-markets.read_corporation_orders.v1 esi-corporations.read_container_logs.v1 esi-industry.read_character_mining.v1 esi-industry.read_corporation_mining.v1 esi-planets.read_customs_offices.v1 esi-corporations.read_facilities.v1 esi-corporations.read_medals.v1 esi-characters.read_titles.v1 esi-alliances.read_contacts.v1 esi-characters.read_fw_stats.v1 esi-corporations.read_fw_stats.v1 esi-characterstats.read.v1
          description: The list of authorized scoped from the set of ESI Data Source possible grant permissions.
        refreshToken:
          type: string
          format: base64
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
          description: The refresh identifier token to be used to get a new access token once the current one is expired.
        assetsCount:
          type: integer
          format: int32
          deprecated: true
          description: the number of assets for this character. This information is no longer required on the authorization credential.
        walletBalance:
          type: number
          format: double
          example: 10764985.82
          deprecated: true
          description: the amount of ISKs for this credential character. This information is no longer required on the authorization credential.
        miningResourcesEstimatedValue:
          type: number
          format: double
          deprecated: true
        raceName:
          type: string
          deprecated: true
        jwtoken:
          type: string
          format: jwt
          deprecated: true
          description: The application JWT token to be used to isolate authorization from the frontend. This is no longer equired since we need the ESI authorization token to be available to other backend servers.
    v1.Asset:
      type: object
      properties:
        id:
          type: integer
          format: in64
          example: 133456985
          description: The ESI unique record identifier for one asset Stack
        resource:
          type: object
          $ref: '#/components/schemas/v1.Stack'
      required:
        - id
        - resource
    v1.Blueprint:
      type: object
    v1.MiningOperation:
      type: object
      properties:
        jsonClass:
          type: string
          description: The unique and constant class name of the Json object that is being described.
          default: MiningOperationDto
          example: MiningOperationDto
        id:
          type: string
          format: uuid
          description: >
            The unique identifier for a mining operation. Is composed of the date, the eve system 
            identifier and the type of the ore that is being represented on the mining operation.
          example: '2024-02-23-30003541-17453'
        date:
          type: string
          format: date
          description: The extraction date for this ore. Each extraction is aggegated by date and ore type.
          example: '2024-02-23'
        solarSystemLink:
          type: string
          format: url
          description: The Eve system link to the Location Provider to get a complete Eve Location.
          example: /api/v4/universe/spacelocation/30003538
        resources:
          type: array
          items:
            $ref: '#/components/schemas/v1.Stack'
      required:
        - jsonClass
        - id
        - date
        - solarSystemLink
        - resources
    v1.Stack:
      properties:
        jsonClass:
          type: string
          readOnly: true
          default: StackDto
          example: StackDto
          description: The class of the Json object that is being described.
        quantity:
          type: integer
          format: int32
          default: 0
          example: 854
          description: The ore stack size or the ore quantity extracted.
        typeLink:
          type: string
          format: url
          example: /api/v4/universe/types/1224
          description: The Eve type access link for the stack type.
      required:
        - jsonClass
        - quantity
        - typelink
    v0.NeocomDto:
      type: object
      required:
        - jsonClass
      properties:
        jsonClass:
          type: string
          description: The unique and constant class name of the Json object that is being described.
          example: SomeClassDto
    v2.ProcessedBlueprint:
      allOf:     # Combines the v0.NeocomDto and the inline model
        - $ref: '#/components/schemas/v0.NeocomDto'
        - type: object
          required:
            - rootCause
          properties:
            typeId:
              type: integer
              format: int32
              description: the blueprint unique eve type identifier.
              example: 17646
            blueprintIten:
              $ref: '#/components/schemas/v1.EsiType'
            location:
              $ref: '#/components/schemas/v1.SpaceLocation'
            materialEfficiency:
              type: integer
              format: int32
              multipleOf: 10
              minimum: 0
              maximum: 100
              description: the efficiency value for the material usages for this blueprint. It can be increased researching the Original blueprint.
              example: 10
            timeEfficiency:
              type: integer
              format: int32
              multipleOf: 10
              minimum: 0
              maximum: 100
              description: the efficiency value for the time to build for this blueprint. It can be increased researching the Original blueprint.
              example: 10
            outputTypeId:
              type: integer
              format: int32
              description: the blueprint unique eve type identifier.
              example: 17647
            outputItem:
              $ref: '#/components/schemas/v1.EsiType'
            manufactureCost:
              type: number
              format: double
              description: the cost to manufacture ona single copy of the output item using this blueprint. Used Region Market for prices data.
              example: 14984.76
            outputCost:
              type: number
              format: double
              description: the cost to buy one output item instead of manufacturing it with the blueprint. Used Region Market for prices data.
              example: 14984.76
            bom:
              type: array
              items:
                $ref: '#/components/schemas/v1.Stack'
            index:
              type: number
              format: double
              description: the relative aspect between the manufacture cost and the output cost for this blueprint. Is the profit multiplier.
              example: 1.500345
    v1.EsiType:
      allOf:     # Combines the v0.NeocomDto and the inline model
        - $ref: '#/components/schemas/v0.NeocomDto'
        - type: object
          required:
            - typeId
            - name
          properties:
            typeId:
              type: integer
              format: int32
              example: 17464
              description: The unique type identifier.
            name:
              type: string
              description: The name of the Eve item
              example: 720mm Howitzer Artillery I
            groupId:
              type: integer
              format: int32
              description: The ESI item group unique identifier.
              example: 55
            groupName:
              type: string
              description: The ESI item group name.
              example: Projectile Weapon
            categoryId:
              type: integer
              format: int32
              description: The ESI item category unique identifier.
              example: 7
            categoryName:
              type: string
              description: The ESI item category name.
              example: Module
    v1.SpaceLocation:
      allOf:     # Combines the v0.NeocomDto and the inline model
        - $ref: '#/components/schemas/v0.NeocomDto'
        - type: object
          required:
            - locationId
          properties:
            locationId:
              type: integer
              format: int32
              description: The unique Eve Universe location identifier.
              example: 60006907

  securitySchemes:
    neocom_esi_auth:
      type: apiKey
      name: neocom_esi_auth
      in: cookie
