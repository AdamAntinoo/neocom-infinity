openapi: '3.0.2'
info:
  title: NeoCom Infinity Backend Public API
  description: |
    # Summary

    ### This is the OpenApi specification active and matching the latest published backend application version seen on the Heroku Production servers.
    This API defines all the client REST endpoints public and available to other systems. The API definition follows the OpenApi 3.0 specification
    and there are provisioning for automatic code generation for this API clients.

    This specification describes the implemented API for the backend on the application **NeoCom.Infinity**. The end points
    described are expected to be used from the **Angular Frontend** application. The ouputs are formatted as JSON results and will
    be consumed by json compliant applications or by clients that will transform them to Java instances. The recommended json deserializer is GSON.

    For java transformation the JSON code could be used to generate the transformation code at the next link. **http://www.jsonschema2pojo.org/**.

    # System Description

    The backend is a single standalone SpringBoot server but that publishes more than a single service. There are 3 main services at this version:

    * **neocom** - this is the authenticated set of endpoints that will collect and the data that can only be obtained when a Pilot is
    authenticated on the ESI services page. Some of the endpoints may also have a counterpart on the other services for public or data that can
    also be obtained with no authentication.
    * **public** - Endpoints that export some sets of data like Character or Market or any other section and that do no require authentication.
    * **universe** - Endpoints that reference universe or game data and not related to any of the previous or so generic and core that can be used
    from anywhere. There are endpoitns for locations, types and other game data structures.

    * **spacelocations** - This service will search for detailed data about a space location identifier and get the type, system, statios or
    structure and any other specific data that is related to the location. Wormholes are still unsupported as many of the out of common space
    coordinates.
    * **items** - This is the item database access service. It will add all sorts of market data to each of the available items.

    The exported data is being improved for HATEOAS support so now some of the endpoints will replace resolved esi data by an equivalent http link.
    This will help to reduce response times because there is no need to go to the ESI servers to get the data (this is specially severe when there
    are collections of data). The consumer application is really required that detailed data can follow the link to retrieve the additional
    information but this is done at the user selection pace and not preloading all possible data records.


    This is most effective on long lists like assets or fittings. Now instead of resolving each of the item accesses and also getting each item
    market information the response will just report a link. Following that link we get the item and from it we can get any market additional data
    is really required.

    ## CHANGES:
    * [20201226] *Introduced the new Market Data endpoints both for authenticated and universal access.*

    ## TODO:
    * [20201019] *Replace old api endpoints by the new HAL endpoints and also document the corrent exception responses.*
    * [20191025] *Complete the definition for the NeoComExceptionResponse once I have the correct serialization data.*

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '0.20.0'
servers:
  - url: https://neocom-backend-stage.herokuapp.com
    description: OpenAPI 0.20.0 for NeoCom Infinity Backend Service. Stage environment
  - url: https://neocom-backend.com
    description: OpenAPI 0.20.0 for NeoCom Infinity Backend Service. Production

tags:
  - name: neocom
    description: >
      NeoCom Infinity Backend (NIB). This is the group of endpoints related to Eve Online backend access for authenticated access. This set of
      endpoints require that a valid JWT token to identify the requester.
  - name: public
    description: >
      Public (P). Endpoints that export some sets of data like Character or Market or any other section and that do no require authentication.
  - name: universe
    description: >
      Universe (U). Endpoints that reference universe or game data and not related to any of the previous or so generic and core that can be used
      from anywhere. There are endpoints for locations, types and other game data structures. Any data that does not require authentication and
      that is publicly available.

paths:
  # - A U T H E N T I C A T I O N
  /api/v1/neocom/validateAuthenticationState:
    get:
      tags:
        - neocom
      summary: Validated if the front end application is still authenticated with a valit token.
      description: |
        The front end sens a http only cookie with the current token if exists. In case there is no cookie, the token is invalid or the credential
        pointed by the token is not found then the endpoint retuns a message to start the login process.
        If the cookie exists, the JWT token is valid and the Credential is found then the cookie y time extended and the application continues to
        the Dashboard page.
      operationId: validateAuthenticationState
      responses:
        '200':
          description: Validation completed successfully and the authentication state is ready.
          content:
            'application/json;charset=UTF-8':
              schema:
                $ref: '#/components/schemas/AuthenticationStateResponse'
  /api/v1/neocom/validateAuthorizationToken:
    get:
      tags:
        - neocom
      summary: Validate the authorization token received from the OAuth CCP server on behalf for the pilot authentication.
      description: |
        Validate the authorization token received from the OAuth CCP server on behalf for the pilot authentication. This
        token along with an application client validation information is received by the backend and then transformed and
        validated against the ESI application authorization definition.

        If the result is positive then the process completes
        creating a Credential with a new authorization token and a jwt NeoCom authentication token to be used by the Frontend.
      operationId: validateAuthorizationToken
      parameters:
        - in: query
          name: code
          required: true
          description: The authorization new code obtained from the CPP OAuth factory and that should be replaced by the final authentication token.
          schema:
            type: string
            example: WTeBQkkFTECb2n-sGs5xVQ
        - in: query
          name: state
          required: true
          description: The unique client identiier to validate if this specific application client is authorized to call the service.
          schema:
            type: string
            example: LU5FT0NPTS5JTkZJTklUWS1ERVZFTE9QTUVOVC1WQUxJRCBTVEFURSBTVFJJTkct
      responses:
        '200':
          description: Validation completed successfully and the new authetication credentialas are ready and operative.
          content:
            'application/json;charset=UTF-8':
              schema:
                $ref: '#/components/schemas/ValidateAuthorizationTokenResponse'
        '400':
          description: >
            Bad formed request or other application exception error like the token was not validated or validation parameters
            do not match.

            * 'neocom.error.authorization.translation': The token authorization translation failed on some step. Validation
            incomplete.

            * 'neocom.error.authorization.verification': The final verification failed. Validation incomplete.
          content:
            'application/json;charset=UTF-8':
              schema:
                $ref: '#/components/schemas/NeoComExceptionResponse'
        '403':
          description: >
            The request was not allowed to complete. Some missing data rejects the request.

            * 'neocom.error.forbidden.corporation': The corporation requested is not authorized to the requester.

            * 'neocom.error.forbidden.pilot': The access to the pilot data is not authorized to the requester credential.
          content:
            'application/json;charset=UTF-8':
              schema:
                $ref: '#/components/schemas/NeoComExceptionResponse'
        '500':
          description: >
            * 'neocom.error.servererror': The backend system encountered an internal error.
          content:
            'application/json;charset=UTF-8':
              schema:
                $ref: '#/components/schemas/NeoComExceptionResponse'

  # - N E O C O M
  /api/v1/neocom/pilots/{pilotId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - neocom
      operationId: getPilotData
      summary: Gets the public data available for a Pilot. It will also have authenticated endpoint links for additional data.
      description: >
        Gets the public data available for a Pilot. Any additional data that is accessible for a Pilot like the Wallet or Fittings will be exported
        as HAL links to a set of authenticated endpoints that export that additional data.
      parameters:
        - in: path
          name: pilotId
          description: The unique id for the ESI pilot record. Pilot identifiers are unique integers that are generated by the game platform.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
          example:
            93813310
      responses:
        200:
          description: >
            The public data information available for this pilot along with the ancestry detailed information. Additionally there are links to
            authorized endpoints for complementary data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PilotV1'
  /api/v1/neocom/corporations/{corporationId}:
    get:
      tags:
        - neocom
      operationId: getCorporation
      parameters:
        - in: path
          name: corporationId
          description: The unique game corporation identifier.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
          example:
            98384726
      responses:
        200:
          description: >
            The public data information available for this pilot along with the ancestry detailed information. Additionally there are links to
            authorized endpoints for complementary data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationModel'

  # - P U B L I C
  /api/v1/public/server/status:
    get:
      tags:
        - public
      operationId: getServerStatus
      responses:
        200:
          description: >
            Gets the NeoCom adaptation for a Character public data that is accessible from the ESI server without authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerStatus'

  /api/v1/public/pilots/{pilotId}:
    get:
      tags:
        - public
      operationId: getCharacterPublicData
      parameters:
        - in: path
          name: pilotId
          description: >
            Unique identifier for the character.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
          example:
            93813310
      responses:
        200:
          description: >
            Gets the NeoCom adaptation for a Character public data that is accessible from the ESI server without authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicPilotV1'
  /api/v1/public/corporations/{corporationId}:
    get:
      tags:
        - public
      operationId: getCorporationPublicData
      parameters:
        - in: path
          name: corporationId
          description: >
            Unique identifier for the corporation.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
          example:
            93813310
      responses:
        200:
          description: >
            Gets the NeoCom adaptation for a Corporation public data that is accessible from the ESI server without authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationPublicData'

  # - U N I V E R S E
  /api/v1/universe/market/consolidated/byregion/{regionId}/{typeId}:
    get:
      tags:
        - universe
      operationId: getMarketConsolidatedByRegion4TypeId
      parameters:
        - in: path
          name: regionId
          description: >
            The region unique identifier for the region where to search for the market data.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
          example:
            10000043
        - in: path
          name: typeId
          description: >
            The type id for the item data to search for market data. For some types there would not be any data so there is not null validations.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
          example:
            11535
      responses:
        200:
          description: >
            A consolidated market data record with some data aggregations and some calculations that represents the market information
            for the selected type id on the target region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketData'

components:
  # - S E C U R I T Y
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # - A U T H E N T I C A T I O N
    AuthenticationStateResponse:
      type: object
      required:
        - state
      properties:
        state:
          type: string
          enum:
            - NOT_FOUND
            - NOT_VALID
            - VALID
          description: >
            The current authentication state for this client application.
            * **NOT_FOUND** - If the cookie does not exist or the Credential is not found.
            * **NOT_VALID** - If the current JWT token is no longer valid.
            * **VALID** - cookie, token and credential are valid.
          example:
            VALID
    # - P U B L I C
    PublicPilotV1:
      type: object
      required:
        - pilotId
        - name
        - description
        - corporation
        - birthday
        - gender
        - securityStatus
        - url4Icon
        - raceData
        - ancestryData
        - bloodlineData
      properties:
        pilotId:
          type: integer
          format: int32
          description: >
            The unique game character identifier assigned at character creation that is going to be used to identify this Pilot.
          example:
            93813310
        name:
          type: string
          description: >
            The user selected character name that is unique and permanent for all the character life cycle.
          example:
            Zach Zender
        description:
          type: string
          description: >
            This is a text that is common to all race-bloodline-ancestry characters.
        corporation:
          $ref: '#/components/schemas/PublicCorporationLink'
        birthday:
          type: string
          format: date-time
          description: >
            The date the character was created on the Eve Online game.
          example:
            "2013-09-09T19:40:09.000Z"
        gender:
          type: string
          enum:
            - male
            - female
          description: >
            The character's gender.
          example:
            "male"
        securityStatus:
          type: number
          format: float
          description: >
            The current security status fro the CONCORD relationships. Depends on the rats killed and other player interactions.
          example:
            0.03513719
        url4Icon:
          type: string
          format: url
          description: >
            The link to the image data server from CPP where we can locate the character's portrait.
          example:
            "https://image.eveonline.com/Character/93813310_256.jpg"
        raceData:
          $ref: '#/components/schemas/RaceData'
        ancestryData:
          $ref: '#/components/schemas/AncestryData'
        bloodlineData:
          $ref: '#/components/schemas/BloodlineData'

    PilotV1:
      type: object
      required:
        - pilotId
        - name
        - description
        - corporation
        - birthday
        - gender
        - securityStatus
        - url4Icon
        - raceData
        - ancestryData
        - bloodlineData
        - totalSkillpoints
        - walletBalance
        - currentShipName
        - currentShipTypeName
        - lastKnownLocation
      properties:
        pilotId:
          type: integer
          format: int32
          description: >
            The unique game character identifier assigned at character creation that is going to be used to identify this Pilot.
          example:
            93813310
        name:
          type: string
          description: >
            The user selected character name that is unique and permanent for all the character life cycle.
          example:
            Zach Zender
        description:
          type: string
          description: >
            This is a text that is common to all race-bloodline-ancestry characters.
        corporation:
          $ref: '#/components/schemas/PublicCorporationLink'
        birthday:
          type: string
          format: date-time
          description: >
            The date the character was created on the Eve Online game.
          example:
            "2013-09-09T19:40:09.000Z"
        gender:
          type: string
          enum:
            - male
            - female
          description: >
            The character's gender.
          example:
            "male"
        securityStatus:
          type: number
          format: float
          description: >
            The current security status fro the CONCORD relationships. Depends on the rats killed and other player interactions.
          example:
            0.03513719
        url4Icon:
          type: string
          format: url
          description: >
            The link to the image data server from CPP where we can locate the character's portrait.
          example:
            "https://image.eveonline.com/Character/93813310_256.jpg"
        raceData:
          $ref: '#/components/schemas/RaceData'
        ancestryData:
          $ref: '#/components/schemas/AncestryData'
        bloodlineData:
          $ref: '#/components/schemas/BloodlineData'
        totalSkillpoints:
          type: integer
          format: int32
          description: >
            The number of skill points learned by the character.
          example:
            8404419
        walletBalance:
          type: number
          format: double
          description: >
            The current wallet amount for the character's wallet.
          example:
            2.76586637596E9
        currentShipName:
          type: string
          description: >
            The current character's ship or the capsule. This field only records the name.
          example:
            "Zach Zender's Velator"
        currentShipTypeName:
          type: string
          description: >
            The current character's ship class name.
          example:
            "Velator"
        lastKnownLocation:
          $ref: '#/components/schemas/SpaceLocation'

    PublicCorporationLink:
      type: object
      required:
        - href
      properties:
        rel:
          type: string
          default: 'publicCorporation'
          description: >
            This fields defined the class type for the next link and to what type of data is should point. This field has a fixed value for each
            link type.
        href:
          type: string
          format: url
          description: >
            The backend url (on any of the backend defined domains) to access a Public Corporation data record for the corporation this pilot
            belongs to.
          example:
            http://localhost:5200/api/v1/public/corporations/98544563

    # - N E O C O M   I N D U S T R Y
    ProcessedBlueprintSummary:
      type: object
      properties:
        uid:
          type: string
          description: >
            A unique identification identifier for a processed industry blueprint belonging to a selected pilot. This is a string in the format:
            BCI:<pilotId>:<blueprintTypeId>
          example:
            "BCI:98384726:31741"
        blueprintTypeId:
          type: integer
          format: int32
          description: >
            the ESI unique blueprint type id.
          example:
            31741
        blueprintTypeName:
          type: string
          description: >
            The ESI type name for the blueprint.
          example:
            "Small Kinetic Shield Reinforcer I Blueprint"
        blueprintTypeIconURL:
          type: string
          description: >
            The link to the image data server from CPP where we can locate the blueprint icon image.
          example:
            "https://image.eveonline.com/Type/31741_64.png"
        outputTypeId:
          type: integer
          format: int32
          description: >
            the ESI unique item type for the item produced by the manufacture action on the blueprint.
          example:
            31740
        outputTypeName:
          type: string
          description: >
            The ESI type name for the output item produced by the manufacture job.
          example:
            "Small Kinetic Shield Reinforcer I"
        outputTypeIconURL:
          type: string
          description: >
            The link to the image data server from CPP where we can locate the output item icon image.
          example:
            "https://image.eveonline.com/Type/31740_64.png"
        outputPrice:
          type: number
          format: float
          description: >
            The best sell price minus a 10% of trade margin calculated over the best sell order at the market hub preferred by the pilot.
          example:
            10880.0
        tradeStation:
          $ref: '#/components/schemas/Station'
        manufactureMaterialCost:
          type: number
          format: float
          description: >
            The sum of the preferred market hub best sell prices for each of the elements that are required for the module manufacture job.
          example:
            9645.34
        costIndex:
          type: number
          format: float
          description: >
            The relative cost index for the blueprint. Not all manufacture jobs take the same time to complete so the index adds that time
            component to the profit index and allows to compare different blueprints with the same absolute profitability index. So the
            profitability of each blueprint is divided by the manufacture cost time in hours to get a reference index.
          example:
            (10880.0 - 9645.34)/48*100 = 2572,208

    # - U N I V E R S E
    SpaceLocation:
      type: object
      properties:
        locationId:
          type: integer
          format: int32
          description: >
            The final current location identifier. There are other identification values with lower value that may point to
            system/constellation/region location hierarchy. This location can also be a NPC or player structure identifier.
          example:
            60010408


    CorporationPublicData:
      type: object
      required:
        corporationId
      properties:
        corporationId:
          type: integer
          description: >
            The unique identifier assigned to the corporation.

    CorporationModel:
      type: object
      properties:
        corporationId:
          type: integer
    WalletModel:
      type: object
      properties:
        balance:
          type: number
          format: double
          description: >
            The wallet balance is the current amount of ISK available at the pilot's wallet. The unit are ISK and they can be expressed up to 2
            decimals.
          example:
            1345987,45
        journal:
          $ref: '#/components/schemas/WalletJournalModel'
        transactions:
          $ref: '#/components/schemas/WalletTransactionsModel'
    WalletJournalModel:
      type: array
      items:
        $ref: '#/components/schemas/Link'
    WalletJournalEntryModel:
      type: object
      properties:
        amount:
          type: number
          format: double
          description: >
            The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet
            and negative when ISK is withdrawn.
          example:
            -100000.00
    WalletTransactionsModel:
      type: array
      items:
        $ref: '#/components/schemas/Link'
    WalletTransactionEntryModel:
      type: object
      properties:
        client_id:
          type: integer
          format: int32
          description: >
            Character unique id of the client partner on the transaction.
          example:
            94726838

    # - U N I V E R S E
    ServerStatus:
      type: object
      required:
      properties:
        server:
          type: string
          description: >
            The server selector. Once there were different ESI data sources. Now there is only the production 'Tranquility' server.
          default:
            Tranquility
          example:
            Tranquility
        players:
          type: integer
          format: int32
          description: >
            The current number of players connected to the server.
          example:
            26172
        backendVersion:
          type: string
          description: >
            The backend server version identifier that should match the production tag.
          example:
            0.20.0
        SDEVersion:
          type: string
          description: >
            The SDE repository content version. Initially this is the date where the database was generated but should match the fuzzwork SDE
            identifier.
          example:
            20201231-APP
        start_time:
          type: string
          format: 'date-time'
          description: >
            The formatted date time when the Tranquility server was last started.
        startAgo:
          type: string
          description: >
            A text description of the time ago that the Tranquility server was started.
          example:
            3 hours, 28 minutes and 33 seconds ago
        nextDowntime:
          type: string
          description: >
            Textual description of the time that if left until the next downtime.
          example:
            Downtime in 19 hours, 27 minutes and 15 seconds
    MarketData:
      type: object
      required:
        - typeId
        - sellOrders
        - sellDeep
        - sellAverage
        - marketWidth
      properties:
        typeId:
          type: integer
          format: int32
          description: >
            The type identifier for the requested type whose market data is on the record.
          example:
            11535
        bestSellOrder:
          $ref: '#/components/schemas/MarketOrder'
        bestBuyOrder:
          $ref: '#/components/schemas/MarketOrder'
        sellOrders:
          type: array
          items:
            $ref: '#/components/schemas/GetMarketsRegionIdOrders200Ok'
        sellDeep:
          type: integer
          format: int32
          description: >
            Represents the number of items selling that match the best sell price or are inside a predefined range usually of the 5% more that this
            best sell price.
          example:
            12097
        sellAverage:
          type: number
          format: double
          description: >
            The average price for the sell items on the market deep range. This is the prices of the sell elements on the 5% range dicided by the
            market sell deep.
          example:
            39735.0
        marketWidth:
          type: number
          format: double
          description: >
            The price difference between the best sell price and the highest buy price if both exist. A negative values means that som of the sell
            or buy prices does not exists and so the width cannot be calculated.
          example:
            12.65
    MarketOrder:
      type: object
      required:
        - station
      properties:
        orderId:
          type: integer
          format: int32
          description: >
            This is the internal identifier on CCP servers for the market order instance.
          example:
            5880091755
        price:
          type: number
          format: double
          description: >
            The original market order price as recorded on the game.
          example:
            39000.0
        typeId:
          type: integer
          format: int32
          description: >
            The type identifier for the item being traded.
          example:
            11535
        volumeRemain:
          type: integer
          format: int32
          description: >
            The number of items still left on the market order.
          example:
            120
        volumeTotal:
          type: integer
          format: int32
          description: >
            The original number of items set on the market order when created.
          example:
            130
        station:
          $ref: '#/components/schemas/Station'
    GetMarketsRegionIdOrders200Ok:
      type: object
    Station:
      type: object

    Link:
      type: object
      properties:
        href:
          type: string
          format: string
          description: >
            HATEOAS link to another resource that is going to be served by this same service backend.
          example:
            'https://host:9500/api/v1/neocom/pilots/98384726'

    ValidateAuthorizationTokenResponse:
      type: object
      required:
        - responseType
        - jwtToken
        - credential
      properties:
        responseType:
          type: string
          description: |
            The classification type of the response so the client can use the right deserializer.
          example: 'ValidateAuthorizationTokenResponse'

    NeoComExceptionResponse:
      type: object
      required:
        - errorCode
        - message

    RaceData:
      type: object
      required:
        - raceId
        - allianceId
        - name
        - description
      properties:
        raceId:
          type: integer
          format: int32
          description: >
            The unique identifier for the race.
          example:
            12
    AncestryData:
      type: object
      required:
        - id
        - name
        - description
      properties:
        id:
          type: integer
          format: int32
          description: >
            The unique identifier for the ancestry data.
          example:
            12
    BloodlineData:
      type: object
      required:
        - bloodlineId
        - name
        - description
      properties:
        bloodlineId:
          type: integer
          format: int32
          description: >
            The unique identifier for the ancestry data.
          example:
            12
